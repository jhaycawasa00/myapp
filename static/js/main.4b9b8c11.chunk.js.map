{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","state","counter","incrementCounter","bind","decrementCounter","className","this","props","counterTitle","onClick","setState","Component","App","counters","increaseCounters","decreaseCounters","index","push","key","counterNumber","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iNAuCeA,E,YApCd,aAAe,IAAD,8BACb,+CAEKC,MAAQ,CACZC,QAAS,GAGV,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBARX,E,sEAWb,OACC,yBAAKE,UAAU,WACd,4BAAKC,KAAKC,MAAMC,cAChB,wCAAcF,KAAKN,MAAMC,SACzB,4BAAQQ,QAASH,KAAKF,kBAAtB,aACA,4BAAQK,QAASH,KAAKJ,kBAAtB,gB,yCAMF,IAAID,EAAUK,KAAKN,MAAMC,QACzBK,KAAKI,SAAS,CACbT,QAAUA,GAAW,M,yCAKtB,IAAIA,EAAUK,KAAKN,MAAMC,QACzBK,KAAKI,SAAS,CACbT,QAAUA,GAAW,Q,GAhCFU,aCgDPC,E,YA9Cd,aAAe,IAAD,8BACb,+CAEKZ,MAAQ,CACZa,SAAU,GAGX,EAAKC,iBAAmB,EAAKA,iBAAiBX,KAAtB,gBACxB,EAAKY,iBAAmB,EAAKA,iBAAiBZ,KAAtB,gBARX,E,sEAab,IADA,IAAIU,EAAW,GACNG,EAAQ,EAAGA,EAAQV,KAAKN,MAAMa,SAAUG,IAChDH,EAASI,KAAK,kBAAC,EAAD,CAASC,IAAKF,EAAOG,cAAeH,KAGnD,OACC,yBAAKX,UAAU,OACd,4BAAQA,UAAU,cACjB,wBAAIA,UAAU,aAAd,kBACA,4BAAQI,QAASH,KAAKQ,kBAAtB,KACA,4BAAQL,QAASH,KAAKS,kBAAtB,MAED,yBAAKV,UAAU,eAAeQ,M,yCAMhC,IAAIA,EAAWP,KAAKN,MAAMa,SAAW,EAErCP,KAAKI,SAAS,CACbG,e,yCAKD,IAAIA,EAAWP,KAAKN,MAAMa,SAAW,EAErCP,KAAKI,SAAS,CACbG,iB,GA1CeF,aCSES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4b9b8c11.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Counter extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tcounter: 0\n\t\t};\n\n\t\tthis.incrementCounter = this.incrementCounter.bind(this);\n\t\tthis.decrementCounter = this.decrementCounter.bind(this);\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Counter\">\n\t\t\t\t<h2>{this.props.counterTitle}</h2>\n\t\t\t\t<h3>Counter: {this.state.counter}</h3>\n\t\t\t\t<button onClick={this.decrementCounter}>Decrement</button>\n\t\t\t\t<button onClick={this.incrementCounter}>Increment</button>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tincrementCounter() {\n\t\tlet counter = this.state.counter;\n\t\tthis.setState({\n\t\t\tcounter: (counter += 1)\n\t\t});\n\t}\n\n\tdecrementCounter() {\n\t\tlet counter = this.state.counter;\n\t\tthis.setState({\n\t\t\tcounter: (counter -= 1)\n\t\t});\n\t}\n}\n\nexport default Counter;\n","import React, { Component } from 'react';\nimport Counter from './Counter';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tcounters: 0\n\t\t};\n\n\t\tthis.increaseCounters = this.increaseCounters.bind(this);\n\t\tthis.decreaseCounters = this.decreaseCounters.bind(this);\n\t}\n\n\trender() {\n\t\tlet counters = [];\n\t\tfor (let index = 0; index < this.state.counters; index++) {\n\t\t\tcounters.push(<Counter key={index} counterNumber={index} />);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1 className=\"App-title\">React Counters</h1>\n\t\t\t\t\t<button onClick={this.increaseCounters}>+</button>\n\t\t\t\t\t<button onClick={this.decreaseCounters}>-</button>\n\t\t\t\t</header>\n\t\t\t\t<div className=\"Counter-row\">{counters}</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tincreaseCounters() {\n\t\tlet counters = this.state.counters + 1;\n\n\t\tthis.setState({\n\t\t\tcounters\n\t\t});\n\t}\n\n\tdecreaseCounters() {\n\t\tlet counters = this.state.counters - 1;\n\n\t\tthis.setState({\n\t\t\tcounters\n\t\t});\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}